{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"","text":""},{"location":"contributing/","title":"Contributing","text":"<p>Contributions to the ESPHome suite are very welcome! All the code for the projects is hosted on GitHub and you can find the sources here:</p> <ul> <li>ESPHome: Project Source Code</li> <li>ESPHome-Docs: Project user manual</li> <li>developers.esphome.io: This developers guide.</li> </ul> <p>Best practice Just clone the repository locally, do the changes for your new feature/bug fix and submit a pull request.</p>"},{"location":"contributing/CODE_OF_CONDUCT/","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"contributing/CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at esphome@nabucasa.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"contributing/CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at http://contributor-covenant.org/version/1/4</p>"},{"location":"contributing/code/","title":"Contributing to ESPHome","text":"<p>For a detailed guide, please see contributing-to-esphom</p> <p>Things to note when contributing:</p> <ul> <li>Please test your changes :)</li> <li>If a new feature is added or an existing user-facing feature is changed, you should also     update the docs. See contributing to esphome-docs     for more information.</li> <li>Please also update the tests in the <code>tests/</code> folder. You can do so by just adding a line in one of the YAML files     which checks if your new feature compiles correctly.</li> <li>Sometimes I will let pull requests linger because I'm not 100% sure about them. Please feel free to ping     me after some time.</li> </ul>"},{"location":"contributing/code/clang/","title":"Full list of current clang checks","text":"<p>We use the congig from github. Above that we have use a list of configuration settings listed below.</p> Configuration List. <pre><code>Language:        Cpp\nAccessModifierOffset: -1\nAlignAfterOpenBracket: Align\nAlignConsecutiveAssignments: false\nAlignConsecutiveDeclarations: false\nAlignEscapedNewlines: DontAlign\nAlignOperands:   true\nAlignTrailingComments: true\nAllowAllParametersOfDeclarationOnNextLine: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: All\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: MultiLine\nBinPackArguments: true\nBinPackParameters: true\nBraceWrapping:\n  AfterClass:      false\n  AfterControlStatement: false\n  AfterEnum:       false\n  AfterFunction:   false\n  AfterNamespace:  false\n  AfterObjCDeclaration: false\n  AfterStruct:     false\n  AfterUnion:      false\n  AfterExternBlock: false\n  BeforeCatch:     false\n  BeforeElse:      false\n  IndentBraces:    false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakInheritanceList: BeforeColon\nBreakBeforeTernaryOperators: true\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeColon\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nColumnLimit:     120\nCommentPragmas:  '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: true\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\nFixNamespaceComments: true\nForEachMacros:\n\n-   foreach\n-   Q_FOREACH\n-   BOOST_FOREACH\n    IncludeBlocks:   Preserve\n    IncludeCategories:\n-   Regex:           '^&amp;lt;ext/.\\*.h&gt;'\n    Priority:        2\n-   Regex:           '^&amp;lt;.\\*.h&gt;'\n    Priority:        1\n-   Regex:           '^&amp;lt;.\\*'\n    Priority:        2\n-   Regex:           '.\\*'\n        Priority:        3\n    IncludeIsMainRegex: '([-\\_](test|unittest))?$'\n    IndentCaseLabels: true\n    IndentPPDirectives: None\n    IndentWidth:     2\n    IndentWrappedFunctionNames: false\n    KeepEmptyLinesAtTheStartOfBlocks: false\n    MacroBlockBegin: ''\n    MacroBlockEnd:   ''\n    MaxEmptyLinesToKeep: 1\n    NamespaceIndentation: None\n    PenaltyBreakAssignment: 2\n    PenaltyBreakBeforeFirstCallParameter: 1\n    PenaltyBreakComment: 300\n    PenaltyBreakFirstLessLess: 120\n    PenaltyBreakString: 1000\n    PenaltyBreakTemplateDeclaration: 10\n    PenaltyExcessCharacter: 1000000\n    PenaltyReturnTypeOnItsOwnLine: 2000\n    PointerAlignment: Right\n    RawStringFormats:\n-   Language:        Cpp\n    Delimiters:\n    -   cc\n    -   CC\n    -   cpp\n    -   Cpp\n    -   CPP\n    -   'c++'\n    -   'C++'\n        CanonicalDelimiter: ''\n        BasedOnStyle:    google\n-   Language:        TextProto\n        Delimiters:\n          - pb\n          - PB\n          - proto\n          - PROTO\n        EnclosingFunctions:\n          - EqualsProto\n          - EquivToProto\n          - PARSE_PARTIAL_TEXT_PROTO\n          - PARSE_TEST_PROTO\n          - PARSE_TEXT_PROTO\n          - ParseTextOrDie\n          - ParseTextProtoOrDie\n        CanonicalDelimiter: ''\n        BasedOnStyle:    google\n    ReflowComments:  true\n    SortIncludes:    false\n    SortUsingDeclarations: false\n    SpaceAfterCStyleCast: true\n    SpaceAfterTemplateKeyword: false\n    SpaceBeforeAssignmentOperators: true\n    SpaceBeforeCpp11BracedList: false\n    SpaceBeforeCtorInitializerColon: true\n    SpaceBeforeInheritanceColon: true\n    SpaceBeforeParens: ControlStatements\n    SpaceBeforeRangeBasedForLoopColon: true\n    SpaceInEmptyParentheses: false\n    SpacesBeforeTrailingComments: 2\n    SpacesInAngles:  false\n    SpacesInContainerLiterals: false\n    SpacesInCStyleCastParentheses: false\n    SpacesInParentheses: false\n    SpacesInSquareBrackets: false\n    Standard:        Auto\n    TabWidth:        2\n    UseTab:          Never\n</code></pre>"},{"location":"contributing/code/ctidy/","title":"how to setup VScode to make sure CTidy runs before commiting your changes.","text":"<p>snjkasdnsdMl;fsead vmd vjkasecmzdczsdmkvnseriv ml  ,sd</p>"},{"location":"contributing/code/ctidy/#list-of-points-to-watch-for","title":"List of points to watch for.","text":"<ul> <li>c,dmvamksd</li> <li>vdfgsdrfg</li> <li>dgasdgsdr</li> </ul>"},{"location":"contributing/docs/","title":"ESPHome Docs","text":""},{"location":"contributing/docs/#contributing-to-esphome-docs","title":"Contributing to ESPHome-Docs","text":"<p>The ESPHome documentation is built using sphinx and uses reStructuredText for all source files.</p> <p>If you're not familiar with writing reStructuredText, see :ref:<code>rst-syntax</code> for a quick refresher.</p>"},{"location":"contributing/docs/#local","title":"Local","text":"<p>The easiest way is to use the esphome-docs container image:</p> <p><pre><code>docker run --rm -v \"${PWD}/\":/data/esphomedocs -p 8000:8000 -it ghcr.io/esphome/esphome-docs\n</code></pre>    With <code>PWD</code> referring to the root of the <code>esphome-docs</code> git repository. Then go to <code>&lt;CONTAINER_IP&gt;:8000</code> in your browser.</p> <p>This way, you don't have to install the dependencies to build the documentation.</p> <p>To check your documentation changes locally, you first need install Sphinx (with Python 3).</p> <p><pre><code># in ESPHome-Docs repo:\npip install -r requirements.txt\n</code></pre> Then, use the provided Makefile to build the changes and start a live-updating web server:</p> <pre><code># Start web server on port 8000\nmake live-html\n</code></pre>"},{"location":"contributing/docs/#notes","title":"Notes","text":"<p>Some notes about the docs:</p> <ul> <li>Use the English language (duh...)</li> <li>An image tells a thousand words, please use them wherever possible. But also don't forget to shrink them, for example     I often use tinypng</li> <li>Try to use examples as often as possible (also while it's great to use highly accurate,     and domain-specific lingo, it should not interfere with new users understanding the content)</li> <li>Fixes/improvements for the docs themselves should go to the <code>current</code> branch of the     esphomedocs repository. New features should be added against the <code>next</code> branch.</li> <li>Always create new branches in your fork for each pull request.</li> </ul>"},{"location":"contributing/docs/github/","title":"Through Github","text":"<p>This guide essentially goes over the same material found in [GitHub\\'s Editing files in another user\\'s repository \\&lt;https://docs.github.com/en/repositories/working-with-files/managing-files/editing-files#editing-files-in-another-users-repository&gt;]{.title-ref}__. You may also find that page helpful to read.</p> <p>At the bottom of each page in the docs, there is a \\\"Edit this page on GitHub\\\" link. Click this link and you\\'ll see something like this:</p> <p></p> <p>Click the edit button to start making changes. If you\\'re not sure about some element of syntax, see the quick-start <code>rst-syntax</code> guide.</p> <p>Once you\\'ve made your changes, give them a useful name and press \\\"Propose changes\\\". At this point, you\\'ve made the changes on your own personal copy of the docs in GitHub, but you still need to submit them to us.</p> <p></p> <p>To do that, you need to create a \\\"Pull request\\\":</p> <p></p> <p>Fill out the new pull request form, replacing the [[ ]]{.title-ref} with [[x]]{.title-ref} to indicate that you have followed the instructions.</p> <p></p> <p>After waiting a while, you might see a green or a red mark next to your commit in your pull request:</p> <p></p> <p>This means that there is some error stopping your pull request from being fully processed. Click on the X, click on \\\"Details\\\" next to the lint step, and look and see what\\'s causing your change to fail.</p> <p></p> <p></p> <p>For example, in this case, you\\'d want to go to line 136 of [pzemac.rst]{.title-ref} and adjust the number of [===]{.title-ref} so that it completely underlines the section heading.</p> <p>Once you make that change, the pull request will be built again, and hopefully this time where will be no other errors.</p>"},{"location":"contributing/docs/syntax/","title":"Syntax","text":""},{"location":"contributing/docs/syntax/#restructuredtex-syntax","title":"reStructuredTex Syntax","text":"<p>Here's a quick reStructuredTex (RST) primer:</p> <p>Title hierarchy is based on order of occurrence, not on type of character used to underline it. This documents establish the following character order for better consistency.</p> <p>reStructured text can do a lot more than this, so if you're looking for a more complete guide please have a look at the Sphinx reStructuredText Primer.</p>"},{"location":"contributing/docs/syntax/#headers","title":"Headers","text":"<p>You can write titles like this:</p> <pre><code>My Title\n========\n</code></pre> <p>and section headers like this:</p> <pre><code>My Sub Section\n--------------\n</code></pre> <p>and sub-section headers like this:</p> <pre><code>My Sub-sub Section\n******************\n</code></pre> <p>Note</p> <p>The length of the bar below the text must match the title Text length. Also, titles should be in Title Case</p>"},{"location":"contributing/docs/syntax/#links","title":"Links","text":"<p>To create a link to an external resource (for example https://www.google.com), use <code>\\`Link text &lt;link_url&gt;\\`__</code>. For example:</p> <pre><code>`Google.com &lt;https://www.google.com&gt;`__\n</code></pre> <p>Google.com</p>"},{"location":"contributing/docs/syntax/#references","title":"References","text":"<p>To reference another document, use the <code>:doc:</code> and <code>:ref:</code> roles (references are set up globally and can be used between documents):</p> <pre><code>.. _my-reference-label:\n\nSection to cross-reference\n--------------------------\n\nSee :ref:`my-reference-label`, also see :doc:`/components/switch/gpio`.\n:doc:`Using custom text &lt;/components/switch/gpio&gt;`.\n</code></pre> <p>See :ref:<code>devices</code>, also see :doc:<code>/components/switch/gpio</code>. :doc:<code>Using custom text &lt;/components/switch/gpio&gt;</code>.</p>"},{"location":"contributing/docs/syntax/#inline-code","title":"Inline code","text":"<p>To have text appear <code>like this</code>, use double backticks:</p> <pre><code>    To have text appear ``like this``, use double backticks.\n</code></pre> <p>To have text appear <code>like this</code>, use double backticks.</p>"},{"location":"contributing/docs/syntax/#code-blocks","title":"Code blocks","text":"<p>To show a sample configuration file, use the <code>code-block</code> directive:</p> <p><pre><code>.. code-block:: yaml\n\n# Sample configuration entry\nswitch:\n    - platform: gpio\n    name: \"Relay #42\"\n    pin: GPIO13\n</code></pre> <pre><code># Sample configuration entry\nswitch:\n    - platform: gpio\n    name: \"Relay #42\"\n    pin: GPIO13\n</code></pre></p> <p>!!! note::     Please note the empty line after the <code>code-block</code> directive. That is necessary.</p>"},{"location":"contributing/docs/syntax/#images","title":"Images","text":"<p>To show images, use the <code>figure</code> directive:</p> <pre><code>.. figure:: images/dashboard_states.png\n    :align: center\n    :width: 40.0%\n\n    Optional figure caption.\n</code></pre> <p></p> <p>Note</p> <p>All images in the documentation need to be as small as possible to ensure fast page load times. For normal figures the maximum size should be at most about 1000x800 px or so. Additionally, please use online tools like https://tinypng.com/ or https://tinyjpg.com/ to further compress images.</p>"},{"location":"contributing/docs/syntax/#notes-and-warnings","title":"Notes and warnings","text":"<p>You can create simple notes and warnings using the <code>note</code> and <code>warning</code> directives:</p> <pre><code>.. note::\n\n    This is a note.\n\n.. warning::\n\n    This is a warning.\n</code></pre> <p>Note</p> <p>This is a note.</p> <p>Warning</p> <p>This is a warning.</p>"},{"location":"contributing/docs/syntax/#italic-and-boldface-font-families","title":"Italic and boldface font families","text":"<p>To italicize text, use one asterisk around the text.</p> <p>To put a strong emphasis on a piece of text, put two asterisks around it.</p> <p><pre><code>    *This is italicized.* (A weird word...)\n    **This is very important.**\n</code></pre> This is italicized. (A weird word...) This is very important.</p>"},{"location":"contributing/docs/syntax/#ordered-and-unordered-list","title":"Ordered and unordered list","text":"<p>The syntax for lists in RST is more or less the same as in Markdown:</p> <pre><code>- Unordered item\n  - Unordered sub-item\n- Item with a very long text so that it does not fully fit in a single line and\n    must be split up into multiple lines.\n</code></pre> <ul> <li>Unordered item<ul> <li>Unordered sub-item</li> </ul> </li> <li>Item with a very long text so that it does not fully fit in a single line and must be split up into multiple lines.</li> </ul> <pre><code>1 Ordered item #1\n  # sub ordered item\n2 Ordered item #2\n</code></pre> <ol> <li>Ordered item #1<ol> <li>sub ordered item</li> </ol> </li> <li>Ordered item #2</li> </ol>"},{"location":"contributing/docs/syntax/#imgtable","title":"imgtable","text":"<p>ESPHome uses a custom RST directive to show the table on the front page (see</p> <p>index.rst. New pages need to be added to the <code>imgtable</code> list. The syntax is CSV with ,  (without RST),  (in top-level images/ directory),  (optional - short text to describe the component). The aspect ratio of these images should be 8:10 (or 10:8) but exceptions are possible. <p>Because these images are served on the main page, they need to be compressed heavily. SVGs are preferred over JPGs and JPGs should be max. 300x300px. If you have imagemagick installed, you can use this command to convert the thumbnail:</p> <pre><code>convert -sampling-factor 4:2:0 -strip -interlace Plane -quality 80% -resize 300x300 in.jpg out.jpg\n</code></pre>"},{"location":"guides/cli/","title":"Command Line Interface","text":""},{"location":"guides/cli/#base-usage","title":"Base Usage","text":"<p>ESPHome's command line interface always has the following format</p> <pre><code>esphome [OPTIONS] &lt;COMMAND&gt; &lt;CONFIGURATION...&gt; [ARGUMENTS]\n</code></pre>"},{"location":"guides/cli/#esphome-base-options","title":"esphome base options","text":""},{"location":"guides/cli/#option-h-or-help","title":"Option <code>-h</code> or <code>--help</code>","text":"<p>Output possible  and [arguments]. <p>Note</p> <p>You can also use <code>--help</code> for any command to get arguments specific to that command.</p> <pre><code>esphome &lt;some_command&gt; --help\n</code></pre>"},{"location":"guides/cli/#option-v-or-verbose","title":"Option <code>-v</code> or <code>--verbose</code>","text":"<p>Enable verbose esphome logs.</p>"},{"location":"guides/cli/#option-q-or-quiet","title":"Option <code>-q</code> or <code>--quiet</code>","text":"<p>Disable all esphome logs.</p>"},{"location":"guides/cli/#option-s-or-substitution-key-value","title":"Option <code>-s</code> or <code>--substitution KEY VALUE</code>","text":"<p>(can be issued multiple times)</p> <p>Defines or overrides substitution KEY with value VALUE.</p> <p>Please see command line substitutions for details.</p>"},{"location":"guides/cli/#esphome-commands","title":"esphome commands","text":"<p>!!note     You can specify multiple configuration files in the command line interface for some commands,     just list all files after the  like so: <pre><code>```console\nesphome run livingroom.yaml kitchen.yaml\n```\n</code></pre>"},{"location":"guides/cli/#run-command","title":"<code>run</code> Command","text":"<p>The <code>esphome run &lt;CONFIG&gt;</code> command is the most common command for ESPHome. It</p> <ul> <li>Validates the configuration</li> <li>Compiles a firmware</li> <li>Uploads the firmware (over OTA or USB)</li> <li>Starts the log view</li> </ul> <pre><code>esphome run [--device UPLOAD_PORT] [--no-logs] [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] [--host-port HOST_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-device-upload_port","title":"Option <code>--device UPLOAD_PORT</code>","text":"<p>Manually specify the upload port/IP to use. For example <code>/dev/cu.SLAB_USBtoUART</code>, or <code>192.168.1.176</code> to perform an OTA.</p>"},{"location":"guides/cli/#option-no-logs","title":"Option <code>--no-logs</code>","text":"<p>Disable starting log view.</p>"},{"location":"guides/cli/#option-topic-topic","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to subscribe to for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-username-username","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username to subscribe with for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-password-password","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password to subscribe with for MQTT logs (defaults to the one in the configuration).</p>"},{"location":"guides/cli/#option-client-id-client_id","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client ID to subscribe with for MQTT logs (defaults to a randomly chosen one).</p>"},{"location":"guides/cli/#option-host-port-host_port","title":"Option <code>--host-port HOST_PORT</code>","text":"<p>Specify the host port to use for legacy Over the Air uploads.</p>"},{"location":"guides/cli/#config-command","title":"<code>config</code> Command","text":"<p>The <code>esphome config &lt;CONFIG&gt;</code> validates the configuration and displays the validation result.</p> <pre><code>esphome config &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#compile-command","title":"<code>compile</code> Command","text":"<p>The <code>esphome compile &lt;CONFIG&gt;</code> validates the configuration and compiles the firmware.</p> <pre><code>esphome compile [--only-generate] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-only-generate","title":"Option <code>--only-generate</code>","text":"<p>If set, only generates the C++ source code and does not compile the firmware.</p>"},{"location":"guides/cli/#upload-command","title":"<code>upload</code> Command","text":"<p>The <code>esphome upload &lt;CONFIG&gt;</code> validates the configuration and uploads the most recent firmware build.</p> <pre><code>esphome upload [--device UPLOAD_PORT] [--host-port HOST_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-device-upload_port_1","title":"Option <code>--device UPLOAD_PORT</code>","text":"<p>Manually specify the upload port/IP address to use. For example <code>/dev/cu.SLAB_USBtoUART</code>, or <code>192.168.1.176</code> to perform an OTA.</p>"},{"location":"guides/cli/#option-host-port-host_port_1","title":"Option <code>--host-port HOST_PORT</code>","text":"<p>Specify the host port to use for legacy Over the Air uploads.</p>"},{"location":"guides/cli/#clean-mqtt-command","title":"<code>clean-mqtt</code> Command","text":"<p>The <code>esphome clean-mqtt &lt;CONFIG&gt;</code> cleans retained MQTT discovery messages from the MQTT broker. See .</p> <pre><code>esphome clean-mqtt [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-topic-topic_1","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to clean retained messages from (defaults to the MQTT discovery topic of the node).</p>"},{"location":"guides/cli/#option-username-username_1","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username to subscribe with.</p>"},{"location":"guides/cli/#option-password-password_1","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password to subscribe with.</p>"},{"location":"guides/cli/#option-client-id-client_id_1","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client ID to subscribe with.</p>"},{"location":"guides/cli/#wizard-command","title":"<code>wizard</code> Command","text":"<p>The <code>esphome wizard &lt;CONFIG&gt;</code> command starts the ESPHome configuration creation wizard.</p> <pre><code>esphome wizard &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#mqtt-fingerprint-command","title":"<code>mqtt-fingerprint</code> Command","text":"<p>The <code>esphome mqtt-fingerprint &lt;CONFIG&gt;</code> command shows the MQTT SSL fingerprints of the remote used for SSL MQTT connections. See :ref:<code>mqtt-ssl_fingerprints</code>.</p> <pre><code>esphome mqtt-fingerprint &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#version-command","title":"<code>version</code> Command","text":"<p>The <code>esphome version</code> command shows the current ESPHome version and exits.</p> <pre><code>esphome version\n</code></pre>"},{"location":"guides/cli/#clean-command","title":"<code>clean</code> Command","text":"<p>The <code>esphome clean &lt;CONFIG&gt;</code> command cleans all build files and can help with some build issues.</p> <pre><code>esphome clean &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#dashboard-command","title":"<code>dashboard</code> Command","text":"<p>The <code>esphome dashboard &lt;CONFIG&gt;</code> command starts the ESPHome dashboard server for using ESPHome through a graphical user interface. This command accepts a configuration directory instead of a single configuration file.</p> <pre><code>esphome dashboard [--port PORT] [--username USERNAME] [--password PASSWORD] [--open-ui] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-port-port","title":"Option <code>--port PORT</code>","text":"<p>Manually set the HTTP port to open connections on (defaults to 6052)</p>"},{"location":"guides/cli/#option-username-username_2","title":"Option <code>--username USERNAME</code>","text":"<p>The optional username to require for authentication.</p>"},{"location":"guides/cli/#option-password-password_2","title":"Option <code>--password PASSWORD</code>","text":"<p>The optional password to require for authentication.</p>"},{"location":"guides/cli/#option-open-ui","title":"Option <code>--open-ui</code>","text":"<p>If set, opens the dashboard UI in a browser once the server is up and running.</p>"},{"location":"guides/cli/#logs-command","title":"<code>logs</code> Command","text":"<p>The <code>esphome logs &lt;CONFIG&gt;</code> command validates the configuration and shows all logs.</p> <pre><code>esphome logs [--topic TOPIC] [--username USERNAME] [--password PASSWORD] [--client-id CLIENT_ID] [--device SERIAL_PORT] &lt;CONFIG&gt;\n</code></pre>"},{"location":"guides/cli/#option-topic-topic_2","title":"Option <code>--topic TOPIC</code>","text":"<p>Manually set the topic to subscribe to.</p>"},{"location":"guides/cli/#option-username-username_3","title":"Option <code>--username USERNAME</code>","text":"<p>Manually set the username.</p>"},{"location":"guides/cli/#option-password-password_3","title":"Option <code>--password PASSWORD</code>","text":"<p>Manually set the password.</p>"},{"location":"guides/cli/#option-client-id-client_id_2","title":"Option <code>--client-id CLIENT_ID</code>","text":"<p>Manually set the client id.</p>"},{"location":"guides/cli/#option-device-serial_port","title":"Option <code>--device SERIAL_PORT</code>","text":"<p>Manually specify a serial port/IP to use. For example <code>/dev/cu.SLAB_USBtoUART</code>.</p>"},{"location":"guides/cli/#using-bash-or-zsh-auto-completion","title":"Using Bash or ZSH auto-completion","text":"<p>ESPHome's command line interface provides the ability to use auto-completion features provided by Bash or ZSH.</p> <p>You can register ESPHome for auto-completion by adding the following to your ~/.bashrc file:</p> <pre><code>eval \"$(register-python-argcomplete esphome)\"\n</code></pre> <p>For more information, see argcomplete documentation.</p>"},{"location":"guides/creators/","title":"Sharing ESPHome devices","text":"<p>We have added configuration options to ESPHome to make it easier to create, configure, install and distribute devices running ESPHome.</p> <p>No part of a \"template\" configuration should have any references to secrets, or have passwords pre-applied. ESPHome makes it easy for the end-user to add these themselves after they adopt the device into their own ESPHome dashboard.</p>"},{"location":"guides/creators/#example-configuration","title":"Example configuration","text":"<pre><code>    # These substitutions allow the end user to override certain values\n    substitutions:\n      name: \"project-template\"\n      friendly_name: \"Project Template\"\n\n    esphome:\n      name: \"${name}\"\n      # Friendly names are used where appropriate in Home Assistant\n      friendly_name: \"${friendly_name}\"\n      # Automatically add the mac address to the name\n      # so you can use a single firmware for all devices\n      name_add_mac_suffix: true\n\n      # This will allow for (future) project identification,\n      # configuration and updates.\n      project:\n        name: esphome.project-template\n        version: \"1.0\"\n\n    # To be able to get logs from the device via serial and api.\n    logger:\n\n    # API is a requirement of the dashboard import.\n    api:\n\n    # OTA is required for Over-the-Air updating\n    ota:\n\n    # This should point to the public location of this yaml file.\n    dashboard_import:\n      package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6\n      import_full_config: false # or true\n\n    wifi:\n      # Set up a wifi access point\n      ap:\n        password: \"12345678\"\n\n    # In combination with the `ap` this allows the user\n    # to provision wifi credentials to the device.\n    captive_portal:\n\n    # Sets up Bluetooth LE (Only on ESP32) to allow the user\n    # to provision wifi credentials to the device.\n    esp32_improv:\n      authorizer: none\n\n    # Sets up the improv via serial client for Wi-Fi provisioning\n    improv_serial:\n      next_url: https://example.com/project-template/manual?ip={{ip_address}}&amp;name={{device_name}}&amp;version={{esphome_version}}\n</code></pre>"},{"location":"guides/creators/#relevant-documentation","title":"Relevant Documentation","text":"<ul> <li><code>name_add_mac_suffix</code> - :ref:<code>esphome-mac_suffix</code></li> <li><code>project</code> - :ref:<code>esphome-creators_project</code></li> <li><code>esp32_improv</code> - :doc:<code>/components/esp32_improv</code></li> <li><code>captive_portal</code> - :doc:<code>/components/captive_portal</code></li> <li><code>wifi</code> -&gt; <code>ap</code> allows you to flash a device that will not contain any   credentials and they must be set by the user via either the <code>ap</code> + <code>captive_portal</code> or   the <code>esp32_improv</code> / <code>improv_serial</code> components.</li> <li> <p><code>dashboard_import</code>     .. note::</p> <pre><code>The :ref:`esphome-creators_project` above is required for adoption to work in the Dashboard.\n</code></pre> <ul> <li><code>package_import_url</code> - This should point to the public repository containing   the configuration for the device so that the user's ESPHome dashboard can autodetect this device and   create a minimal YAML using :ref:<code>config-git_packages</code>.</li> <li><code>import_full_config</code> - This signals if ESPHome should download the entire YAML file as the user's config   YAML instead of referencing the package. Set this to <code>true</code> if you are creating a tutorial to let users   easily tweak the whole configuration or be able to uncomment follow-up tutorial steps.</li> <li><code>improv_serial</code> - :doc:<code>/components/improv_serial</code></li> </ul> </li> </ul>"},{"location":"guides/creators/#see-also","title":"See Also","text":"<ul> <li>:ghedit:<code>Edit</code></li> </ul>"},{"location":"guides/typography/","title":"Heading 1","text":""},{"location":"guides/typography/#heading-2","title":"Heading 2","text":""},{"location":"guides/typography/#heading-3","title":"Heading 3","text":""},{"location":"guides/typography/#heading-4","title":"Heading 4","text":""},{"location":"guides/typography/#heading-5","title":"Heading 5","text":""},{"location":"guides/typography/#heading-6","title":"Heading 6","text":""},{"location":"guides/typography/#typography","title":"Typography","text":"<p>This is an example inline link.  This is bold and italic. While this is <code>code block()</code> and following is a <code>pre</code> tag</p> <pre><code>print 'this is pre tag'\n</code></pre>"},{"location":"guides/typography/#following-is-the-syntax-highlighted-code-block","title":"Following is the syntax highlighted code block","text":"<pre><code>func getCookie(name string, r interface{}) (*http.Cookie, error) {\n    rd := r.(*http.Request)\n    cookie, err := rd.Cookie(name)\n    if err != nil {\n        return nil, err\n    }\n    return cookie, nil\n}\n</code></pre> <pre><code>title: \"Typography - Test for features\"\ndate: 2018-03-18T12:13:38+05:30\ndescription: List of all possibilities of Markdown\nmenu:\n  main:\n    parent: guide\n    weight: 4\n\ntags: typography\n</code></pre>"},{"location":"guides/typography/#blockquotes","title":"blockquotes","text":"<p>This is blockquote, Will make it better now</p> <p>'I want to do with you what spring does with the cherry trees.' cited ~Pablo Neruda*</p> <p>Et harum quidem rerum facilis est et expeditasi distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihilse impedit</p>"},{"location":"guides/typography/#unordered-list","title":"Unordered list","text":"<ul> <li>Red</li> <li>Green</li> <li>Blue</li> </ul> <p>Ordered list</p> <ol> <li>Red</li> <li>Green</li> <li>Blue</li> </ol> <pre><code>        .. _my-reference-label:\n\n        Section to cross-reference\n        --------------------------\n\n        See :ref:`my-reference-label`, also see :doc:`/components/switch/gpio`.\n        :doc:`Using custom text &lt;/components/switch/gpio&gt;`.\n</code></pre> <pre><code>// Markdown extra adds un-indented code blocks too\n\nif (this_is_more_code == true &amp;&amp; !indented) {\n    // tild wrapped code blocks, also not indented\n}\n</code></pre> <p>Text with two trailing spaces (on the right) can be used for things like poems</p>"},{"location":"guides/typography/#horizontal-rules","title":"Horizontal rules","text":"<p>This is a div wrapping some Markdown plus.  Without the DIV attribute, it ignores the block.</p>"},{"location":"guides/typography/#markdown-plus-tables","title":"Markdown plus tables","text":"Header Header Right Cell Cell $10 Cell Cell $20 <ul> <li>Outer pipes on tables are optional</li> <li>Colon used for alignment (right versus left)</li> </ul>"},{"location":"guides/typography/#markdown-plus-definition-lists","title":"Markdown plus definition lists","text":"Bottled water $ 1.25 $ 1.55 (Large) Milk Pop $ 1.75 <ul> <li>Multiple definitions and terms are possible</li> <li>Definitions can include multiple paragraphs too</li> </ul> <p>[ABBR]: Markdown plus abbreviations (produces an  tag) <p>Table (Source: \u4e3a\u4ec0\u4e48\u6709\u4e9b\u6c49\u5b57\u5728\u65e5\u8bed\u4e2d\u4f1a\u8bfb\u6210\u4e24\u62cd)</p> \u6c49\u8bed\u666e\u901a\u8bdd \u7ca4\u8bed \u65e5\u8bed \u5199\u4f5c \u8d1d\u514b\u6c49\u59c6 \u78a7\u54b8 \u30d9\u30c3\u30ab\u30e0 \u8bfb\u4f5c bei ke han mu bik ham Be kka mu"}]}